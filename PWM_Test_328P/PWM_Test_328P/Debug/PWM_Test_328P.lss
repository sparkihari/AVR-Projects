
PWM_Test_328P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000194  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000208  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000073e  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000694  00000000  00000000  000009de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000030c  00000000  00000000  00001072  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001380  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000394  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000048  00000000  00000000  00001748  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001790  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 7d 00 	call	0xfa	; 0xfa <main>
  88:	0c 94 c8 00 	jmp	0x190	; 0x190 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <PWM_Init>:

int i = 0;

static void PWM_Init(void)
{
	DDRB |= (1<<1) | (1<<2) | (1<<3);
  90:	84 b1       	in	r24, 0x04	; 4
  92:	8e 60       	ori	r24, 0x0E	; 14
  94:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<3) | (1<<5) | (1<<6);
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	88 66       	ori	r24, 0x68	; 104
  9a:	8a b9       	out	0x0a, r24	; 10


	TCCR1A |= (1<<COM1A1) | (1<<COM1B1) | (1<<WGM11);
  9c:	e0 e8       	ldi	r30, 0x80	; 128
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	82 6a       	ori	r24, 0xA2	; 162
  a4:	80 83       	st	Z, r24
	ICR1	= 1250;               							// (16 MHz / 256) / 50 = 1250 (Top value)
  a6:	82 ee       	ldi	r24, 0xE2	; 226
  a8:	94 e0       	ldi	r25, 0x04	; 4
  aa:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  ae:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>

	TCCR0A |= (1<<COM0A1) | (1<<COM0B1) | (1<<WGM01) | (1<<WGM00);
  b2:	84 b5       	in	r24, 0x24	; 36
  b4:	83 6a       	ori	r24, 0xA3	; 163
  b6:	84 bd       	out	0x24, r24	; 36
	
	TCCR2A |= (1<<COM2A1) | (1<<COM2B1) | (1<<WGM21) | (1<<WGM20);
  b8:	e0 eb       	ldi	r30, 0xB0	; 176
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	83 6a       	ori	r24, 0xA3	; 163
  c0:	80 83       	st	Z, r24


	TCCR1B |= (1<<WGM13) | (1<<WGM12) | (1<<CS12);
  c2:	e1 e8       	ldi	r30, 0x81	; 129
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	8c 61       	ori	r24, 0x1C	; 28
  ca:	80 83       	st	Z, r24

	TCCR0B |= (1<<CS02);
  cc:	85 b5       	in	r24, 0x25	; 37
  ce:	84 60       	ori	r24, 0x04	; 4
  d0:	85 bd       	out	0x25, r24	; 37
	
	TCCR2B |= (1<<CS22) | (1<<CS21);
  d2:	e1 eb       	ldi	r30, 0xB1	; 177
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	86 60       	ori	r24, 0x06	; 6
  da:	80 83       	st	Z, r24

	
	OCR0A = 0;
  dc:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0;
  de:	18 bc       	out	0x28, r1	; 40
	
	OCR1A = 0;
  e0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  e4:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = 0;
  e8:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  ec:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	
	OCR2A = 0;
  f0:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	OCR2B = 0;
  f4:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
  f8:	08 95       	ret

000000fa <main>:
	
}
int main(void)
{
	PWM_Init();
  fa:	0e 94 48 00 	call	0x90	; 0x90 <PWM_Init>
	
    
    while (1) 
    {
		for (i=0; i<250; i++)
  fe:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 102:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 106:	3b c0       	rjmp	.+118    	; 0x17e <main+0x84>
		{
				OCR0A = i;
 108:	87 bd       	out	0x27, r24	; 39
				OCR0B = i;
 10a:	e0 e0       	ldi	r30, 0x00	; 0
 10c:	f1 e0       	ldi	r31, 0x01	; 1
 10e:	80 81       	ld	r24, Z
 110:	88 bd       	out	0x28, r24	; 40
						
				OCR1A = i * 5;
 112:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 116:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 11a:	9c 01       	movw	r18, r24
 11c:	22 0f       	add	r18, r18
 11e:	33 1f       	adc	r19, r19
 120:	22 0f       	add	r18, r18
 122:	33 1f       	adc	r19, r19
 124:	82 0f       	add	r24, r18
 126:	93 1f       	adc	r25, r19
 128:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 12c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
				OCR1B = i * 5;
 130:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 134:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 138:	9c 01       	movw	r18, r24
 13a:	22 0f       	add	r18, r18
 13c:	33 1f       	adc	r19, r19
 13e:	22 0f       	add	r18, r18
 140:	33 1f       	adc	r19, r19
 142:	82 0f       	add	r24, r18
 144:	93 1f       	adc	r25, r19
 146:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 14a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
						
				OCR2A = i;
 14e:	80 81       	ld	r24, Z
 150:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
				OCR2B = i;
 154:	80 81       	ld	r24, Z
 156:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15a:	2f ef       	ldi	r18, 0xFF	; 255
 15c:	81 ee       	ldi	r24, 0xE1	; 225
 15e:	94 e0       	ldi	r25, 0x04	; 4
 160:	21 50       	subi	r18, 0x01	; 1
 162:	80 40       	sbci	r24, 0x00	; 0
 164:	90 40       	sbci	r25, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <main+0x66>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0x70>
 16a:	00 00       	nop
	PWM_Init();
	
    
    while (1) 
    {
		for (i=0; i<250; i++)
 16c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 170:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 17a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 17e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 182:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 186:	8a 3f       	cpi	r24, 0xFA	; 250
 188:	91 05       	cpc	r25, r1
 18a:	0c f4       	brge	.+2      	; 0x18e <main+0x94>
 18c:	bd cf       	rjmp	.-134    	; 0x108 <main+0xe>
 18e:	b7 cf       	rjmp	.-146    	; 0xfe <main+0x4>

00000190 <_exit>:
 190:	f8 94       	cli

00000192 <__stop_program>:
 192:	ff cf       	rjmp	.-2      	; 0x192 <__stop_program>
